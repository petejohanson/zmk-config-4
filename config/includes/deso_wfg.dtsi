/*
 * Last Update 10/5/24
 * WFG 19x2
 * 
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include "combos_3col.dtsi"
#include "macros.dtsi"
#include "behaviors.dtsi"

// Layer aliases
#define DEFAULT  0
#define SYMBOL   1
#define NUMBER   2
#define MOUSE    3
#define MACRO    4
#define FUNCTION 5
#define SCROLL   6

// Short defines
// #define D_LT   LC(LG(LEFT))
// #define D_RT   LC(LG(RIGHT))
// #define TAB_RT LC(TAB)
// #define TAB_LT LC(LS(TAB))
// #define LCC K_COPY
// #define LCV K_PASTE
#define SFTENT &mt RSHIFT RET
#define SFTSPC &mt LSHIFT SPC
#define CPST &cccv LC(C) LC(V)
#define CLIP &kp LC(LA(Q))
#define GSHT &kp LC(LA(G))

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <160>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};



#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MM_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MM_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MM_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MM_R MOVE_X(U_MOUSE_MOVE_MAX)

/ {
    to_wheel: to_wheel {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map = <INPUT_REL_X INPUT_REL_HWHEEL>
            , <INPUT_REL_Y INPUT_REL_WHEEL>;
    };

    trackball_listener {
        input-processors = <&zip_temp_layer MOUSE 1200>;

        scroll {
            layers = <SCROLL>;
            input-processors = <&zip_xy_scaler 1 18>, <&to_wheel>, <&zip_scroll_transform (INPUT_TRANSFORM_Y_INVERT)>;
        };
    };

    behaviors {
        // keys to a fake mouse input device
        mm: mouse_move {
            compatible = "zmk,behavior-input-two-axis";
            #binding-cells = <1>;
            trigger-period-ms = <12>;
            x-input-code = <INPUT_REL_X>;
            y-input-code = <INPUT_REL_Y>;
            time-to-max-speed-ms = <10>;
            acceleration-exponent = <1>;
        };
    };

    // mapping the fake keys to mouse device tack to the layers
    mmv_input_listener {
        compatible = "zmk,input-listener";
        device = <&mm>;
        input-processors = <&zip_xy_scaler 1 1>, <&zip_temp_layer MOUSE 1200>;

        scroll {
            inherit;
            layers = <MOUSE>;
            input-processors = <&zip_xy_scaler 1 7>, <&to_wheel>, <&zip_scroll_transform (INPUT_TRANSFORM_Y_INVERT)>;
        };
    };

{
   keymap {
        compatible = "zmk,keymap";


// ---------------------------------------------------------------------------------------------------------------
// |   TAB   |    W   [Q]   F   [B]   G num|         |    X    |         |    M   [J]   L    |    U    |  BSPC   |
// |  SHIFT  | A macro[V]   R   [P]   S sym|         |    X    |         |    N   [K]   E   [!]   I    |  DEL    |
// |  XXXX   |  C  fn [Z]   D   [X]   T    |         |    X    |         | H mouse |  O tt,  |  Y  tt. |  XXXX   |
//                     |   CCCV  |SPC/SHFT | RETURN  |    X    |   SPC   | SPC/ENT |   Paste |
// ---------------------------------------------------------------------------------------------------------------
        default_layer {
            display-name = "-DESO-";            
            bindings = <LAYER_FROM38( \
                &none, &none, &tdW, &kp F, &lt NUM G, &kp M, &kp L, &kp U, &none, &none, \
                &none, &none, &lt MAC A, &kp R, &lt SYM S, &kp N, &kp E, &kp I, &none, &none, \
                &none, &none, &lt FUN C, &hrm LCTRL D, &hrm LALT T, &lt MSE H, &tdO, &tdY, &none, &none, \
                &kp R, CPST,  SFTSPC, SFTSPC, SFTENT, SFTENT,  &kp DEL, &kp A \
            )>;
        };


        symbol_layer {
            display-name = "SYMBOL";
            bindings = <LAYER_FROM38( \
                &none, &none, &grvtld, &kp STAR, &none, &par, &bkt, &thn, &none, &none, \
                &none, &none, &none, &kp PLUS, &none, &cln, &sls, &pipe, &none, &none, \
                &none, &none, &none, &none, &none, &qot, &at, &perc, &none, &none, \
                &trans, &trans, &trans, &none, &none, &trans, &trans,  &trans \
            )>;
        };

        number_layer {
            display-name = "NUMBER";
            bindings = <LAYER_FROM38( \
                &none, &none, &kp TAB, &kp STAR, &none, &kp N7, &kp N8, &kp N9, &none, &none, \
                &none, &none, &none, &none, &none, &kp N4, &kp N5, &kp N6, &none, &none, \
                &none, &none, &bootloader, &none, &none, &kp N1, &td20, &kp N3, &none, &none, \
                       &trans, &trans, &trans, &none, &none, &trans, &trans, &trans \
            )>;
        };

        mouse_layer {
            display-name = "MOUSE";
            bindings = <LAYER_FROM38( \
                &none, &none, &msc SCRL_UP, &mmv MOVE_UP, &msc SCRL_DOWN, &kp MINUS, &kp UNDER, &kp BSPC, &none, &none, \
                &none, &none, &mmv MOVE_LEFT, &mmv MOVE_DOWN, &mmv MOVE_RIGHT, &none, &none, &none, &none, &none, \
                &none, &none, &mkp MCLK, &mkp RCLK, &mkp LCLK, &none, &none, CPST, &none, &none, \
                      &none, &mkp MCLK, &mkp RCLK, &mkp LCLK, &trans, &trans, &trans, &none \
            )>;
        };

        macro_layer {
            display-name = "MACRO";
            bindings = <LAYER_FROM38( \
                &none, &none, &none, &none, &none, &none, &none, &none, &none, &none, \
                &none, &none, &trans, &lines, &square, &none, &none, &none, &none, &none, \
                &none, &none, &none, &date, &time, &th, &re, &yw, &none, &none, \
                      &trans, &trans, &trans, &none, &none, &trans, &trans, &trans \
            )>;
        };

        function_layer {
            display-name = "FUNCTION";    
            bindings = <LAYER_FROM38( \
                &none, &none, CPST, CLIP, GSHT, &kp F2, &kp UP, &kp DEL, &none, &none, \
                &none, &none, &kp TAB, &none, &pg, &kp LEFT, &kp DOWN, &kp RIGHT, &none, &none, \
                &none, &none, &trans, &kp LC(BSPC), &hmend, &kp LC(Z), &kp DEL, &kp LC(Y), &none, &none, \
                      &trans, &trans, &trans, &none, &none, &trans, &trans, &trans \
            )>;
        };

        scroll_layer {
            display-name = "SCROLL";
            bindings = <LAYER_FROM38( \
                &none, &none, &msc SCRL_UP, &mmv MOVE_UP, &msc SCRL_DOWN, &kp MINUS, &kp UNDER, &kp BSPC, &none, &none, \
                &none, &none, &mmv MOVE_LEFT, &mmv MOVE_DOWN, &mmv MOVE_RIGHT, &none, &none, &none, &none, &none, \
                &none, &none, &mkp MCLK, &mkp RCLK, &mkp LCLK, &none, &none, CPST, &none, &none, \
                      &none, &mkp MCLK, &mkp RCLK, &mkp LCLK, &trans, &trans, &trans, &none \
            )>;
        };
    };
};



/*
    keymap {
        compatible = "zmk,keymap";

        halmak_layer {
            bindings = <
                &kp W      &kp L      &kp R      &kp B      &kp Z          &kp SEMI   &kp Q      &kp U      &kp D      &kp J
                HRML(S,        H,         N,         T)     &kp COMMA      &kp DOT   HRMR(A,         E,         O,         I)
                &kp F      &kp M      &kp V      &kp C      &kp FSLH       &kp G    &lt SCROLL P &kp X      &kp K      &kp Y
                                            &lt NUMS BSPC  &eth EDIT SPACE &lt NAVI ENTER
            >;
        };
        qwerty_layer {
            bindings = <
                &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
                HRML(A,        S,         D,         F)     &kp G          &kp H     HRMR(J,         K,         L,         SEMI)
                &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N    &lt SCROLL M &kp COMMA  &kp DOT    &kp FSLH
                                            &lt NUMS BSPC  &eth EDIT SPACE &lt NAVI ENTER
            >;
        };
        gamepad_layer {
            bindings = <
                &kp TAB    &kp Q      &kp W      &kp E      &kp G          &none      &kp N4     &kp N5     &kp N9     &kp STAR
                &kp LSHFT  &kp A      &kp S      &kp D      &kp F          &none      &kp N1     &kp N2     &kp N3     &kp PLUS
                &kp LCTRL  &kp Z      &kp X      &kp C      &kp V          &kp N   &lt SCROLL N8 &kp N6     &kp N7     &kp MINUS
                                                 &kp R      &kp SPACE      &lt NAVI ENTER
            >;
        };
        navigation_layer {
            bindings = <
                &kp CARET  &kp LBRC   &kp ASTRK  &kp RBRC   &none          &none      &kp HOME   &kp UP     &kp END    &kp PG_UP
                HRML(EXCL,     LPAR,      HASH,      RPAR)  &none          &none      &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN
                &kp QMARK  &kp AT     &kp PRCNT  &kp DLLR   &none          &none      &none      &none      &none      &none
                                                 &kp DEL    &kp UNDER      &none
            >;
        };
        edit_layer {
            bindings = <
                &kp ESC    &altab     &kp LC(TILDE) &none   &none          &none      &kp LBKT   &kp MINUS  &kp RBKT   &kp GRAVE
              HRML(LC(Z),  LC(X),     LC(C),     LC(V))     &kp LC(LS(Z))  &kp TILDE  &kp LT     &kp EQUAL  &kp GT     &kp SQT
                &none      &none      &none      &none      &none          &none      &kp FSLH   &kp PIPE   &kp BSLH   &kp DQT
                                                 &none      &none          &kp AMPS
            >;
        };
        nums_layer {
            bindings = <
                &none      &none      &none      &none      &none          &kp FSLH   &kp N4     &kp N5     &kp N9     &kp STAR
                &kp LGUI   &kp LALT   &kp LSHFT  &kp LCTRL  &none          &kp DOT    &kp N1     &kp N2     &kp N3     &kp MINUS
                &none      &none      &kp PRCNT  &kp DLLR   &none          &kp COMMA  &kp N8     &kp N6     &kp N7     &kp PLUS
                                                 &none      &none          &kp 0
            >;
        };
        settings_layer {
            bindings = <
                &to QWERTY &none      &none    &out OUT_TOG &bt BT_SEL 0   &none      &kp F4     &kp F5     &kp F9     &kp F10
                &to HALMAK &none      &kp LSHFT  &none      &bt BT_SEL 1   &none      &kp F1     &kp F2     &kp F3     &kp F11
                &to GAMPAD &none      &none      &none      &bt BT_SEL 2   &none      &kp F8     &kp F6     &kp F7     &kp F12
                                                 &none      &none          &none
            >;
        };
        altab_layer {
            bindings = <
                &altab_x   &kp TAB    &altab_x   &altab_x   &altab_x       &altab_x   &altab_x   &altab_x   &altab_x   &altab_x
                &altab_x   &altab_x   &altab_x   &altab_x   &altab_x       &altab_x   &altab_x   &altab_x   &altab_x   &altab_x
                &altab_x   &altab_x   &altab_x   &altab_x   &altab_x       &altab_x   &altab_x   &altab_x   &altab_x   &altab_x
                                                 &altab_x   &altab_x       &altab_x
            >;
        };
        mouse_layer {
            bindings = <
                &none      &none      &none      &none      &none          &none      &none      &mm MM_U   &none      &none
                &none      &none      &none      &none      &none          &none      &mkp LCLK  &mm MM_D   &mkp RCLK  &mo SCROLL
                &none      &none      &none      &none      &none          &none      &none      &mkp MCLK  &none      &none
                                                 &none      &none          &none
            >;
        };
        scroll_layer {
            bindings = <
                &none      &none      &none      &none      &none          &none      &none      &mm MM_U   &none      &none
                &none      &none      &none      &none      &none          &none      &mkp LCLK  &mm MM_D   &mkp RCLK  &none
                &none      &none      &none      &none      &none          &none      &none      &mkp MCLK  &none      &none
                                                 &none      &none          &none
            >;
        };
    };
};
*/
